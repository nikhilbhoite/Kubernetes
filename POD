# pod-related commands commonly used to manage and interact with pods in Kubernetes:

# View / List Pods

kubectl get pods                                   # List all pods in the current namespace
kubectl get pods -n <namespace>                    # List pods in a specific namespace
kubectl get pod <pod-name>                         # View details for a single pod
kubectl describe pod <pod-name>                    # Get detailed info (events, status, containers, etc.)

# Pod Logs

kubectl logs <pod-name>                            # Get logs of a pod
kubectl logs <pod-name> -c <container-name>        # Logs from a specific container
kubectl logs -f <pod-name>                         # Follow logs (live tail)
kubectl logs --previous <pod-name>                 # View logs from a crashed container

# Execute Commands in Pods

kubectl exec -it <pod-name> -- /bin/bash           # Open a bash shell in the container
kubectl exec -it <pod-name> -c <container> -- sh   # Shell into a specific container
kubectl exec <pod-name> -- <command>               # Run a command inside the pod

# Create / Delete Pods

kubectl run <pod-name> --image=<image>             # Create a pod (basic testing)
kubectl delete pod <pod-name>                      # Delete a specific pod
kubectl delete pods --all                          # Delete all pods in the current namespace


# Pod Lifecycle / Management

kubectl get pod <pod-name> -o yaml                 # Output pod definition in YAML
kubectl replace -f <pod-file>.yaml                 # Replace a pod from a YAML file
kubectl apply -f <pod-file>.yaml                   # Apply changes (if managed by controller)
kubectl rollout restart deployment <name>          # Restart pods managed by a deployment

# Debugging / Testing

kubectl get events                                 # View events (see pod issues)
kubectl top pod <pod-name>                         # View resource usage (if metrics-server installed)
kubectl port-forward pod/<pod-name> <local>:<remote>  # Port forward to access a pod locally

# Namespace Handling

kubectl get pods --all-namespaces                  # List all pods in all namespaces
kubectl config set-context --current --namespace=<ns>  # Set default namespace for kubectl



Example of Imerative way to create pod
kubectl run my-clean-pod \
  --image=nginx:1.25 \
  --restart=Never \
  --port=80 \
  --env="ENV=prod" \
  --labels="app=nginx,tier=frontend" \
  --requests="cpu=100m,memory=128Mi" \
  --limits="cpu=200m,memory=256Mi"

#################################################################################################################################################################################################
When you create a Pod imperatively using kubectl run, it’s directly managed by the Kubernetes API — not by a controller like a Deployment. 
That means you can’t "edit and redeploy" it easily, because Pods are not meant to be modified significantly once created.

That said, you have 3 practical ways to change or update such a Pod:

### 1. Delete and Recreate the Pod (Recommended for Most Cases)

Step 1: Export the Pod YAML:
kubectl get pod <pod-name> -o yaml > pod.yaml

Step 2: Edit the YAML file:
nano pod.yaml   # or use your preferred editor
Make your changes (e.g., image, env vars, resources, etc.)

IMP!!! Make sure to remove the following fields before applying:

metadata:
  creationTimestamp:
  resourceVersion:
  uid:
status:

Step 3: Delete the old pod:

kubectl delete pod <pod-name>
Step 4: Apply the updated YAML:

kubectl apply -f pod.

### 2. Edit the Pod In-Place (Not All Fields Allowed)
You can try:

kubectl edit pod <pod-name>
This opens the pod spec in your default editor. 
You can change some fields like labels or annotations, but you cannot edit fields like the image, env vars, or resource requests/limits — doing so will result in an error.

### 3. Generate New Pod with Changes Using kubectl run Again
If you initially used:

kubectl run mypod --image=nginx --restart=Never
To update it, simply:

kubectl delete pod mypod
kubectl run mypod --image=nginx:1.25 --restart=Never --env="MODE=debug"


### Summary
Approach	Use Case
kubectl edit	Minor metadata changes
Delete & apply YAML	Any real change (image, env, resources)
Re-run kubectl run	Quick recreate with updated options
