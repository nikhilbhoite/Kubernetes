##### 
For Master Node
#####

Edit /etc/hosts:

sudo nano /etc/hosts
Add entries for all nodes:

192.168.1.10  master
192.168.1.11  worker1
192.168.1.12  worker2

#  Minimum Requirements: #

2 GB RAM or more per machine
2 CPUs or more
Network connectivity between machines
sudo/root privileges

### Step 1: Disable Swap (on all nodes)
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab
  
### Step 2: Install Container Runtime (on all nodes)

sudo apt update && sudo apt install -y containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

### Step 3: Install kubeadm, kubelet, and kubectl (on all nodes)

sudo apt update
sudo apt install -y apt-transport-https ca-certificates curl

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

Note: In releases older than Debian 12 and Ubuntu 22.04, directory /etc/apt/keyrings does not exist by default, and it should be created before the curl command.

# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

### Step 4: Enable Required Kernel Modules & Settings

hit following commands

cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

sudo sysctl --system

### Step 5: Initialize the Control Plane (on master only)

sudo kubeadm init --pod-network-cidr=192.168.0.0/16

Note the kubeadm join command output – you’ll need it to join workers later.

To use kubectl as a non-root user:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

### Step 6: Install Weave Net CNI (on Master Node)
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"


### Step 7: Get the kubeadm join Command (from master)
On your master node, run:

kubeadm token create --print-join-command
You’ll get an output like this:

kubeadm join 192.168.1.10:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:1234567890abcdef...
### Step 8: Run the Join Command (on each worker)
On each worker node, copy and run that exact kubeadm join command with sudo, like:

sudo kubeadm join 192.168.1.10:6443 --token abcdef.0123456789abcdef \
    --discovery-token-ca-cert-hash sha256:1234567890abcdef...
It will take a minute or two.

### Step 9: Confirm the Node Joined (on master)
Go back to the master node and run:

kubectl get nodes
#You should now see your worker(s) listed:

NAME       STATUS   ROLES           AGE   VERSION
master     Ready    control-plane   10m   v1.30.x
worker1    Ready    <none>          2m    v1.30.x
worker2    Ready    <none>          1m    v1.30.x

Congratulations to you on completing your Kubernetes setup on Ubuntu!



